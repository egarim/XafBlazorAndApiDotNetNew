{
	// Place your global snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	"Create persistent property": {
		"scope": "csharp",
		"prefix": "xprop",
		"body": [
			"private ${2|object,string,int,double,decimal|} _$1;",
			"public $2 ${1:PropertyName} {",
			"     get { return _$1; }",
		    "     set { SetPropertyValue(nameof($1), ref _$1, value); }",
			"}"
		],
		"description": "Create a persistent propert witht he correct setter and getter"
	},
	"Create collection with association": {
		"scope": "csharp",
		"prefix": "xpcl",
		"body": [
			"[Association(\"${3:CurrentTypeName}-$1\")]",
			"public XPCollection<${2:object}> ${1:PropertyName}",
			"{",
			"    get",
			"    {",
			"        return GetCollection<$2>(nameof($1));",
			"    }",
			"}",
		],
		"description": "Use this snippet to create a collection that represents the many on the one side"
	},
	"Create a property with the association attribute": {
		"scope": "csharp",
		"prefix": "xpa",
		"body": [
			"$1 _$1;",
			"",
			"[Association(\"$2-${3:CurrentType}s\")]",
			"public ${2:object} ${1:PropertyName}",
			"{",
			"    get => _$1;",
			"    set => SetPropertyValue(nameof($1), ref _$1, value);",
			"}",
		],
		"description": "Create a persistent propert witht he correct setter and getter"
	},
	"Create domain object": {
		"scope": "csharp",
		"prefix": "xdom",
		"body": [
			"using DevExpress.Data.Filtering;",
			"using DevExpress.ExpressApp;",
			"using DevExpress.ExpressApp.DC;",
			"using DevExpress.ExpressApp.Model;",
			"using DevExpress.Persistent.Base;",
			"using DevExpress.Persistent.BaseImpl;",
			"using DevExpress.Persistent.Validation;",
			"using DevExpress.Xpo;",
			"using System;",
			"using System.Collections.Generic;",
			"using System.ComponentModel;",
			"using System.Linq;",
			"using System.Text;",
			"",
			"namespace ${2:CurrentNameSpace}",
			"{",
			"    [DefaultClassOptions]",
			"    //[ImageName(\"BO_Contact\")]",
			"    //[DefaultProperty(\"DisplayMemberNameForLookupEditorsOfThisType\")]",
			"    //[DefaultListViewOptions(MasterDetailMode.ListViewOnly, false, NewItemRowPosition.None)]",
			"    //[Persistent(\"DatabaseTableName\")]",
			"    // Specify more UI options using a declarative approach (https://documentation.devexpress.com/#eXpressAppFramework/CustomDocument112701).",
			"    public class ${1:DomainObject1} : BaseObject",
			"    { // Inherit from a different class to provide a custom primary key, concurrency and deletion behavior, etc. (https://documentation.devexpress.com/eXpressAppFramework/CustomDocument113146.aspx).",
			"        // Use CodeRush to create XPO classes and properties with a few keystrokes.",
			"        // https://docs.devexpress.com/CodeRushForRoslyn/118557",
			"        public $1(Session session)",
			"            : base(session)",
			"        {",
			"        }",
			"        public override void AfterConstruction()",
			"        {",
			"            base.AfterConstruction();",
			"            // Place your initialization code here (https://documentation.devexpress.com/eXpressAppFramework/CustomDocument112834.aspx).",
			"        }",
			"        ",
			"    }",
			"}",
			
		],
		"description": "Use this snippet to create a XAF domain object (XPO)"
	},
	"Create ViewController": {
		"scope": "csharp",
		"prefix": "xcv",
		"body": [
			"using DevExpress.ExpressApp;",
			"using System;",
			"using System.Collections.Generic;",
			"using System.Linq;",
			"using System.Text;",
			"using System.Threading.Tasks;",
			"using DevExpress.ExpressApp.Actions;",
			"",
			"namespace ${2:CurrentNameSpace}",
			"{",
			"    public class ${1:MyViewController} : ViewController",
			"    {",
			"        public $1() : base()",
			"        {",
			"            // Target required Views (use the TargetXXX properties) and create their Actions.",
			"            ",
			"        }",
			"        protected override void OnActivated()",
			"        {",
			"            base.OnActivated();",
			"            // Perform various tasks depending on the target View.",
			"        }",
			"        protected override void OnDeactivated()",
			"        {",
			"            // Unsubscribe from previously subscribed events and release other references and resources.",
			"            base.OnDeactivated();",
			"        }",
			"        protected override void OnViewControlsCreated()",
			"        {",
			"            base.OnViewControlsCreated();",
			"            // Access and customize the target View control.",
			"        }",
			"    }",
			"}",

		],
		"description": "Use this snippet to create a XAF view controller"
	},
	"Create WindowController": {
		"scope": "csharp",
		"prefix": "xcw",
		"body": [
			"using DevExpress.ExpressApp;",
			"using System;",
			"using System.Collections.Generic;",
			"using System.Linq;",
			"using System.Text;",
			"using System.Threading.Tasks;",
			"using DevExpress.ExpressApp.Actions;",
			"",
			"namespace ${2:CurrentNameSpace}",
			"{",
			"    public class ${1:MyViewController} : WindowController",
			"    {",
			"        public $1() : base()",
			"        {",
			"            // Target required Views (use the TargetXXX properties) and create their Actions.",
			"            ",
			"        }",
			"        protected override void OnActivated()",
			"        {",
			"            base.OnActivated();",
			"            // Perform various tasks depending on the target View.",
			"        }",
			"        protected override void OnDeactivated()",
			"        {",
			"            // Unsubscribe from previously subscribed events and release other references and resources.",
			"            base.OnDeactivated();",
			"        }",
			"    }",
			"}",

		],
		"description": "Use this snippet to create a XAF window controller"
	},
	"Create XAF SimpleAction": {
		"scope": "csharp",
		"prefix": "xas",
		"body": [
			"#region $1",
			"SimpleAction ${1:MyAction} = new SimpleAction(this, \"$1\", \"View\");",
			"$1.Execute += $1_Execute;",
			"void $1_Execute(object $1_sender, SimpleActionExecuteEventArgs $1_e)",
			"{",
			"     // Execute your business logic (https://docs.devexpress.com/eXpressAppFramework/112737/).",
			"}",
			"#endregion",
		],
		"description": "Use this snippet to create a XPO propertyu with XPO special setter"
	},
	"Create XAF SingleChoiceAction": {
		"scope": "csharp",
		"prefix": "xac",
		"body": [
			"#region $1",
			"SingleChoiceAction ${1:Choice} = new SingleChoiceAction(this, \"MyAction\", \"View\");",
			"$1.ItemType = SingleChoiceActionItemType.ItemIsOperation;",
			"$1.Execute += $1_Execute;",
			"// Create some items",
			"//$1.Items.Add(new ChoiceActionItem(\"MyItem1\", \"My Item 1\", 1));",
			"",
			"void $1_Execute(object $1_sender, SingleChoiceActionExecuteEventArgs $1_e)",
			"{",
			"    var itemData = $1_e.SelectedChoiceActionItem.Data;",
			"    // Execute your business logic (https://docs.devexpress.com/eXpressAppFramework/112738/).",
			"}",
			"#endregion",
		],
		"description": "Use this snippet to create a XAF simple action"
	},
	"Create XAF ParametrizedAction": {
		"scope": "csharp",
		"prefix": "xap",
		"body": [
			"#region $1",
			"ParametrizedAction ${1:ParametrizedAction} = new ParametrizedAction(this, \"$1\", \"View\", typeof(${2|string,int,double,DateTime|}));",
			"$1.Execute += $1_Execute;",
			"void $1_Execute(object $1_sender, ParametrizedActionExecuteEventArgs $1_e)",
			"{",
			"    var parameterValue = (string)$1_e.ParameterCurrentValue;",
			"    // Execute your business logic (https://docs.devexpress.com/eXpressAppFramework/112724/).",
			"}",
			"#endregion",
		],
		"description": "Use this snippet to create a XAF parametrized action"
	},
	"Create XAF PopupWindowShowAction": {
		"scope": "csharp",
		"prefix": "xapw",
		"body": [
			"#region $1",
			"PopupWindowShowAction ${1:PopupWindowShowAction} = new PopupWindowShowAction(this,  \"$1\", \"View\");",
			"$1.Execute += $1_Execute;",
			"$1.CustomizePopupWindowParams += $1_CustomizePopupWindowParams;",
			"void $1_Execute(object $1_sender, PopupWindowShowActionExecuteEventArgs $1_e)",
			"{",
			"    var selectedPopupWindowObjects = $1_e.PopupWindowViewSelectedObjects;",
			"    var selectedSourceViewObjects = $1_e.SelectedObjects;",
			"    // Execute your business logic (https://docs.devexpress.com/eXpressAppFramework/112723/).",
			"}",
			"void $1_CustomizePopupWindowParams(object $1_CPWPsender, CustomizePopupWindowParamsEventArgs $1_CPWPe)",
			"{",
			"    ////For ListView",
			"    //var ListView = this.Application.CreateListView(typeof(object), false);",
			"    ",
			"    ////For detail view use one of the following cases , new object or object from object space",
			"    //var DetailViewOs = this.Application.CreateObjectSpace();",
			"  ",
			"    ////Object from object space",
			"    //var DetailViewObject = DetailViewOs.GetObjectsQuery<object>(true).FirstOrDefault(null);",
			"    //var DetailView = this.Application.CreateDetailView(DetailViewOs, DetailViewObject);",
			"",
			"    ////New object",
			"    //var NewObjectInstance = DetailViewOs.CreateObject<object>();",
			"    //var DetailView = this.Application.CreateDetailView(DetailViewOs, NewObjectInstance);",
			"",

			"    // Set the $1_CPWPe.View parameter to a newly created view (https://docs.devexpress.com/eXpressAppFramework/112723/).",
			"}",
			"#endregion",
		],
		"description": "Use this snippet to create a XAF PopupWindowShowAction"
	},
}